{"ast":null,"code":"import{useEffect,useState}from'react';import{useParams,useOutletContext}from'react-router-dom';import useApi from'../hooks/useApi';import{API_URLS}from'../services/api.urls';import{Box,List,Checkbox,Button}from'@mui/material';import Email from'./Email';import{DeleteOutline}from'@mui/icons-material';import NoMails from'./common/NoMails';import{EMPTY_TABS}from'../constants/constant';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Emails=()=>{var _getEmailsService$res2,_getEmailsService$res3;const[starredEmail,setStarredEmail]=useState(false);const[selectedEmails,setSelectedEmails]=useState([]);const{openDrawer}=useOutletContext();const{type}=useParams();const getEmailsService=useApi(API_URLS.getEmailFromType);const deleteEmailsService=useApi(API_URLS.deleteEmails);const moveEmailsToBin=useApi(API_URLS.moveEmailsToBin);const toggleReadEmailsService=useApi(API_URLS.toggleReadMails);useEffect(()=>{getEmailsService.call({},type);},[type,starredEmail]);const selectAllEmails=e=>{if(e.target.checked){var _getEmailsService$res;const emails=getEmailsService===null||getEmailsService===void 0?void 0:(_getEmailsService$res=getEmailsService.response)===null||_getEmailsService$res===void 0?void 0:_getEmailsService$res.map(email=>email._id);setSelectedEmails(emails);}else{setSelectedEmails([]);}};const deleteSelectedEmails=()=>{if(type==='bin'){deleteEmailsService.call(selectedEmails);}else{moveEmailsToBin.call(selectedEmails);}setStarredEmail(prevState=>!prevState);};const toggleReadSelectedEmails=value=>{toggleReadEmailsService.call({ids:selectedEmails,value:value});setStarredEmail(prevState=>!prevState);};return/*#__PURE__*/_jsxs(Box,{style:openDrawer?{marginLeft:250,width:'100%'}:{width:'100%'},children:[/*#__PURE__*/_jsxs(Box,{style:{padding:'20px 10px 0 10px',display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsx(Checkbox,{size:\"small\",onChange:e=>selectAllEmails(e)}),/*#__PURE__*/_jsx(DeleteOutline,{onClick:e=>deleteSelectedEmails(e)}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:()=>toggleReadSelectedEmails(false),children:\"Mark as Unread\"}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:()=>toggleReadSelectedEmails(true),children:\"Mark as Read\"})]}),/*#__PURE__*/_jsx(List,{children:getEmailsService===null||getEmailsService===void 0?void 0:(_getEmailsService$res2=getEmailsService.response)===null||_getEmailsService$res2===void 0?void 0:_getEmailsService$res2.map(email=>/*#__PURE__*/_jsx(Email,{email:email,setStarredEmail:setStarredEmail,selectedEmails:selectedEmails,setSelectedEmails:setSelectedEmails},email.id))}),(getEmailsService===null||getEmailsService===void 0?void 0:(_getEmailsService$res3=getEmailsService.response)===null||_getEmailsService$res3===void 0?void 0:_getEmailsService$res3.length)===0&&/*#__PURE__*/_jsx(NoMails,{message:EMPTY_TABS[type]})]});};export default Emails;","map":{"version":3,"names":["useEffect","useState","useParams","useOutletContext","useApi","API_URLS","Box","List","Checkbox","Button","Email","DeleteOutline","NoMails","EMPTY_TABS","jsx","_jsx","jsxs","_jsxs","Emails","_getEmailsService$res2","_getEmailsService$res3","starredEmail","setStarredEmail","selectedEmails","setSelectedEmails","openDrawer","type","getEmailsService","getEmailFromType","deleteEmailsService","deleteEmails","moveEmailsToBin","toggleReadEmailsService","toggleReadMails","call","selectAllEmails","e","target","checked","_getEmailsService$res","emails","response","map","email","_id","deleteSelectedEmails","prevState","toggleReadSelectedEmails","value","ids","style","marginLeft","width","children","padding","display","alignItems","size","onChange","onClick","variant","id","length","message"],"sources":["/home/atharnex/mycloneprojects/mailflow/client/src/components/Emails.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams, useOutletContext } from 'react-router-dom';\nimport useApi from '../hooks/useApi';\nimport { API_URLS } from '../services/api.urls';\nimport { Box, List, Checkbox, Button } from '@mui/material';\nimport Email from './Email';\nimport { DeleteOutline } from '@mui/icons-material';\nimport NoMails from './common/NoMails';\nimport { EMPTY_TABS } from '../constants/constant';\n\nconst Emails = () => {\n    const [starredEmail, setStarredEmail] = useState(false);\n    const [selectedEmails, setSelectedEmails] = useState([]);\n\n    const { openDrawer } = useOutletContext();\n    const { type } = useParams();\n\n    const getEmailsService = useApi(API_URLS.getEmailFromType);\n    const deleteEmailsService = useApi(API_URLS.deleteEmails);\n    const moveEmailsToBin = useApi(API_URLS.moveEmailsToBin);\n    const toggleReadEmailsService = useApi(API_URLS.toggleReadMails);\n\n    useEffect(() => {\n        getEmailsService.call({}, type);\n    }, [type, starredEmail])\n\n    const selectAllEmails = (e) => {\n        if (e.target.checked) {\n            const emails = getEmailsService?.response?.map(email => email._id);\n            setSelectedEmails(emails);\n        } else {\n            setSelectedEmails([]);\n        }\n    }\n\n    const deleteSelectedEmails = () => {\n        if (type === 'bin') {\n            deleteEmailsService.call(selectedEmails);\n        } else {\n            moveEmailsToBin.call(selectedEmails);\n        }\n        setStarredEmail(prevState => !prevState);\n    }\n\n    const toggleReadSelectedEmails = (value) => {\n        toggleReadEmailsService.call({ ids: selectedEmails, value: value });\n        setStarredEmail(prevState => !prevState);\n    }\n\n    return (\n        <Box style={openDrawer ? { marginLeft: 250, width: '100%' } : { width: '100%' } }>\n            <Box style={{ padding: '20px 10px 0 10px', display: 'flex', alignItems: 'center' }}>\n                <Checkbox size=\"small\" onChange={(e) => selectAllEmails(e)} />\n                <DeleteOutline onClick={(e) => deleteSelectedEmails(e)} />\n                <Button variant=\"outlined\" onClick={() => toggleReadSelectedEmails(false)}>Mark as Unread</Button>\n                <Button variant=\"outlined\" onClick={() => toggleReadSelectedEmails(true)}>Mark as Read</Button>\n            </Box>\n            <List>\n                {\n                    getEmailsService?.response?.map(email => (\n                        <Email \n                            email={email} \n                            key={email.id}\n                            setStarredEmail={setStarredEmail} \n                            selectedEmails={selectedEmails}\n                            setSelectedEmails={setSelectedEmails}\n                        />\n                    ))\n                }\n            </List> \n            {\n                getEmailsService?.response?.length === 0 &&\n                    <NoMails message={EMPTY_TABS[type]} />\n            }\n        </Box>\n    )\n}\n\nexport default Emails;"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,SAAS,CAAEC,gBAAgB,KAAQ,kBAAkB,CAC9D,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,OAASC,QAAQ,KAAQ,sBAAsB,CAC/C,OAASC,GAAG,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,eAAe,CAC3D,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,OAASC,aAAa,KAAQ,qBAAqB,CACnD,MAAO,CAAAC,OAAO,KAAM,kBAAkB,CACtC,OAASC,UAAU,KAAQ,uBAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,KAAAC,sBAAA,CAAAC,sBAAA,CACjB,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACsB,cAAc,CAAEC,iBAAiB,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CAExD,KAAM,CAAEwB,UAAW,CAAC,CAAGtB,gBAAgB,CAAC,CAAC,CACzC,KAAM,CAAEuB,IAAK,CAAC,CAAGxB,SAAS,CAAC,CAAC,CAE5B,KAAM,CAAAyB,gBAAgB,CAAGvB,MAAM,CAACC,QAAQ,CAACuB,gBAAgB,CAAC,CAC1D,KAAM,CAAAC,mBAAmB,CAAGzB,MAAM,CAACC,QAAQ,CAACyB,YAAY,CAAC,CACzD,KAAM,CAAAC,eAAe,CAAG3B,MAAM,CAACC,QAAQ,CAAC0B,eAAe,CAAC,CACxD,KAAM,CAAAC,uBAAuB,CAAG5B,MAAM,CAACC,QAAQ,CAAC4B,eAAe,CAAC,CAEhEjC,SAAS,CAAC,IAAM,CACZ2B,gBAAgB,CAACO,IAAI,CAAC,CAAC,CAAC,CAAER,IAAI,CAAC,CACnC,CAAC,CAAE,CAACA,IAAI,CAAEL,YAAY,CAAC,CAAC,CAExB,KAAM,CAAAc,eAAe,CAAIC,CAAC,EAAK,CAC3B,GAAIA,CAAC,CAACC,MAAM,CAACC,OAAO,CAAE,KAAAC,qBAAA,CAClB,KAAM,CAAAC,MAAM,CAAGb,gBAAgB,SAAhBA,gBAAgB,kBAAAY,qBAAA,CAAhBZ,gBAAgB,CAAEc,QAAQ,UAAAF,qBAAA,iBAA1BA,qBAAA,CAA4BG,GAAG,CAACC,KAAK,EAAIA,KAAK,CAACC,GAAG,CAAC,CAClEpB,iBAAiB,CAACgB,MAAM,CAAC,CAC7B,CAAC,IAAM,CACHhB,iBAAiB,CAAC,EAAE,CAAC,CACzB,CACJ,CAAC,CAED,KAAM,CAAAqB,oBAAoB,CAAGA,CAAA,GAAM,CAC/B,GAAInB,IAAI,GAAK,KAAK,CAAE,CAChBG,mBAAmB,CAACK,IAAI,CAACX,cAAc,CAAC,CAC5C,CAAC,IAAM,CACHQ,eAAe,CAACG,IAAI,CAACX,cAAc,CAAC,CACxC,CACAD,eAAe,CAACwB,SAAS,EAAI,CAACA,SAAS,CAAC,CAC5C,CAAC,CAED,KAAM,CAAAC,wBAAwB,CAAIC,KAAK,EAAK,CACxChB,uBAAuB,CAACE,IAAI,CAAC,CAAEe,GAAG,CAAE1B,cAAc,CAAEyB,KAAK,CAAEA,KAAM,CAAC,CAAC,CACnE1B,eAAe,CAACwB,SAAS,EAAI,CAACA,SAAS,CAAC,CAC5C,CAAC,CAED,mBACI7B,KAAA,CAACX,GAAG,EAAC4C,KAAK,CAAEzB,UAAU,CAAG,CAAE0B,UAAU,CAAE,GAAG,CAAEC,KAAK,CAAE,MAAO,CAAC,CAAG,CAAEA,KAAK,CAAE,MAAO,CAAG,CAAAC,QAAA,eAC7EpC,KAAA,CAACX,GAAG,EAAC4C,KAAK,CAAE,CAAEI,OAAO,CAAE,kBAAkB,CAAEC,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,QAAS,CAAE,CAAAH,QAAA,eAC/EtC,IAAA,CAACP,QAAQ,EAACiD,IAAI,CAAC,OAAO,CAACC,QAAQ,CAAGtB,CAAC,EAAKD,eAAe,CAACC,CAAC,CAAE,CAAE,CAAC,cAC9DrB,IAAA,CAACJ,aAAa,EAACgD,OAAO,CAAGvB,CAAC,EAAKS,oBAAoB,CAACT,CAAC,CAAE,CAAE,CAAC,cAC1DrB,IAAA,CAACN,MAAM,EAACmD,OAAO,CAAC,UAAU,CAACD,OAAO,CAAEA,CAAA,GAAMZ,wBAAwB,CAAC,KAAK,CAAE,CAAAM,QAAA,CAAC,gBAAc,CAAQ,CAAC,cAClGtC,IAAA,CAACN,MAAM,EAACmD,OAAO,CAAC,UAAU,CAACD,OAAO,CAAEA,CAAA,GAAMZ,wBAAwB,CAAC,IAAI,CAAE,CAAAM,QAAA,CAAC,cAAY,CAAQ,CAAC,EAC9F,CAAC,cACNtC,IAAA,CAACR,IAAI,EAAA8C,QAAA,CAEG1B,gBAAgB,SAAhBA,gBAAgB,kBAAAR,sBAAA,CAAhBQ,gBAAgB,CAAEc,QAAQ,UAAAtB,sBAAA,iBAA1BA,sBAAA,CAA4BuB,GAAG,CAACC,KAAK,eACjC5B,IAAA,CAACL,KAAK,EACFiC,KAAK,CAAEA,KAAM,CAEbrB,eAAe,CAAEA,eAAgB,CACjCC,cAAc,CAAEA,cAAe,CAC/BC,iBAAiB,CAAEA,iBAAkB,EAHhCmB,KAAK,CAACkB,EAId,CACJ,CAAC,CAEJ,CAAC,CAEH,CAAAlC,gBAAgB,SAAhBA,gBAAgB,kBAAAP,sBAAA,CAAhBO,gBAAgB,CAAEc,QAAQ,UAAArB,sBAAA,iBAA1BA,sBAAA,CAA4B0C,MAAM,IAAK,CAAC,eACpC/C,IAAA,CAACH,OAAO,EAACmD,OAAO,CAAElD,UAAU,CAACa,IAAI,CAAE,CAAE,CAAC,EAE7C,CAAC,CAEd,CAAC,CAED,cAAe,CAAAR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}